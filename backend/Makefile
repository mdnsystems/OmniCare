# =============================================================================
# MAKEFILE - SWIFT CLINIC API
# =============================================================================
# 
# Comandos √∫teis para gerenciar o ambiente Docker
# 
# =============================================================================

.PHONY: help setup setup-dev build build-dev up up-dev down logs logs-api logs-db logs-redis clean clean-all migrate seed studio health test-docker

# Vari√°veis
COMPOSE_FILE = docker-compose.yml
COMPOSE_DEV_FILE = docker-compose.dev.yml

# Comando padr√£o
help:
	@echo "============================================================================="
	@echo "SWIFT CLINIC API - COMANDOS DISPON√çVEIS"
	@echo "============================================================================="
	@echo ""
	@echo "SETUP E CONFIGURA√á√ÉO:"
	@echo "  setup        - Configurar e iniciar ambiente de produ√ß√£o"
	@echo "  setup-dev    - Configurar e iniciar ambiente de desenvolvimento"
	@echo "  build        - Build das imagens de produ√ß√£o"
	@echo "  build-dev    - Build das imagens de desenvolvimento"
	@echo ""
	@echo "GERENCIAMENTO DE SERVI√áOS:"
	@echo "  up           - Iniciar servi√ßos de produ√ß√£o"
	@echo "  up-dev       - Iniciar servi√ßos de desenvolvimento"
	@echo "  down         - Parar todos os servi√ßos"
	@echo "  restart      - Reiniciar todos os servi√ßos"
	@echo "  restart-api  - Reiniciar apenas a API"
	@echo ""
	@echo "LOGS E MONITORAMENTO:"
	@echo "  logs         - Ver logs de todos os servi√ßos"
	@echo "  logs-api     - Ver logs da API"
	@echo "  logs-db      - Ver logs do PostgreSQL"
	@echo "  logs-redis   - Ver logs do Redis"
	@echo "  health       - Verificar sa√∫de dos servi√ßos"
	@echo "  test-docker  - Testar ambiente Docker"
	@echo ""
	@echo "BANCO DE DADOS:"
	@echo "  migrate      - Executar migra√ß√µes"
	@echo "  seed         - Executar seed do banco"
	@echo "  studio       - Abrir Prisma Studio"
	@echo "  db-reset     - Reset completo do banco (CUIDADO!)"
	@echo ""
	@echo "MANUTEN√á√ÉO:"
	@echo "  clean        - Limpar containers e volumes n√£o utilizados"
	@echo "  clean-all    - Limpar tudo (CUIDADO!)"
	@echo "  shell        - Acessar shell do container da API"
	@echo "  shell-db     - Acessar shell do PostgreSQL"
	@echo ""

# =============================================================================
# SETUP E CONFIGURA√á√ÉO
# =============================================================================

setup:
	@echo "üîß Configurando ambiente de produ√ß√£o..."
	@./scripts/docker-setup.sh prod

setup-dev:
	@echo "üîß Configurando ambiente de desenvolvimento..."
	@./scripts/docker-setup.sh dev

build:
	@echo "üèóÔ∏è  Fazendo build das imagens de produ√ß√£o..."
	@docker-compose -f $(COMPOSE_FILE) build

build-dev:
	@echo "üèóÔ∏è  Fazendo build das imagens de desenvolvimento..."
	@docker-compose -f $(COMPOSE_FILE) -f $(COMPOSE_DEV_FILE) build

# =============================================================================
# GERENCIAMENTO DE SERVI√áOS
# =============================================================================

up:
	@echo "üöÄ Iniciando servi√ßos de produ√ß√£o..."
	@docker-compose -f $(COMPOSE_FILE) up -d

up-dev:
	@echo "üöÄ Iniciando servi√ßos de desenvolvimento..."
	@docker-compose -f $(COMPOSE_FILE) -f $(COMPOSE_DEV_FILE) up -d
	@docker-compose -f $(COMPOSE_FILE) -f $(COMPOSE_DEV_FILE) --profile development up -d

down:
	@echo "üõë Parando todos os servi√ßos..."
	@docker-compose -f $(COMPOSE_FILE) down

restart:
	@echo "üîÑ Reiniciando todos os servi√ßos..."
	@docker-compose -f $(COMPOSE_FILE) restart

restart-api:
	@echo "üîÑ Reiniciando API..."
	@docker-compose -f $(COMPOSE_FILE) restart api

# =============================================================================
# LOGS E MONITORAMENTO
# =============================================================================

logs:
	@echo "üìã Mostrando logs de todos os servi√ßos..."
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-api:
	@echo "üìã Mostrando logs da API..."
	@docker-compose -f $(COMPOSE_FILE) logs -f api

logs-db:
	@echo "üìã Mostrando logs do PostgreSQL..."
	@docker-compose -f $(COMPOSE_FILE) logs -f postgres

logs-redis:
	@echo "üìã Mostrando logs do Redis..."
	@docker-compose -f $(COMPOSE_FILE) logs -f redis

health:
	@echo "üè• Verificando sa√∫de dos servi√ßos..."
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "üîç Testando endpoints de sa√∫de..."
	@curl -f http://localhost:8080/health || echo "‚ùå API n√£o est√° respondendo"
	@docker-compose -f $(COMPOSE_FILE) exec -T postgres pg_isready -U postgres -d swift_clinic && echo "‚úÖ PostgreSQL OK" || echo "‚ùå PostgreSQL n√£o est√° respondendo"
	@docker-compose -f $(COMPOSE_FILE) exec -T redis redis-cli ping && echo "‚úÖ Redis OK" || echo "‚ùå Redis n√£o est√° respondendo"

# =============================================================================
# TESTES
# =============================================================================

test-docker:
	@echo "üß™ Testando ambiente Docker..."
	@./scripts/test-docker.sh

# =============================================================================
# BANCO DE DADOS
# =============================================================================

migrate:
	@echo "üóÑÔ∏è  Executando migra√ß√µes..."
	@docker-compose -f $(COMPOSE_FILE) exec -T api npx prisma migrate deploy

seed:
	@echo "üå± Executando seed do banco..."
	@docker-compose -f $(COMPOSE_FILE) exec -T api npm run seed

studio:
	@echo "üé® Abrindo Prisma Studio..."
	@docker-compose -f $(COMPOSE_FILE) exec -T api npx prisma studio --hostname 0.0.0.0 --port 5555

db-reset:
	@echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° apagar todos os dados do banco!"
	@read -p "Tem certeza? Digite 'sim' para confirmar: " confirm; \
	if [ "$$confirm" = "sim" ]; then \
		echo "üóëÔ∏è  Resetando banco de dados..."; \
		docker-compose -f $(COMPOSE_FILE) down; \
		docker volume rm swiftclinic_postgres_data || true; \
		docker-compose -f $(COMPOSE_FILE) up -d; \
		echo "‚è≥ Aguardando banco ficar pronto..."; \
		sleep 10; \
		docker-compose -f $(COMPOSE_FILE) exec -T api npx prisma migrate deploy; \
		echo "‚úÖ Banco resetado com sucesso!"; \
	else \
		echo "‚ùå Opera√ß√£o cancelada."; \
	fi

# =============================================================================
# MANUTEN√á√ÉO
# =============================================================================

clean:
	@echo "üßπ Limpando containers e volumes n√£o utilizados..."
	@docker system prune -f
	@docker volume prune -f

clean-all:
	@echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso ir√° remover TODOS os containers, imagens e volumes!"
	@read -p "Tem certeza? Digite 'sim' para confirmar: " confirm; \
	if [ "$$confirm" = "sim" ]; then \
		echo "üóëÔ∏è  Limpando tudo..."; \
		docker-compose -f $(COMPOSE_FILE) down -v; \
		docker system prune -a -f --volumes; \
		echo "‚úÖ Limpeza completa realizada!"; \
	else \
		echo "‚ùå Opera√ß√£o cancelada."; \
	fi

shell:
	@echo "üêö Acessando shell do container da API..."
	@docker-compose -f $(COMPOSE_FILE) exec api sh

shell-db:
	@echo "üêö Acessando shell do PostgreSQL..."
	@docker-compose -f $(COMPOSE_FILE) exec postgres psql -U postgres -d swift_clinic 