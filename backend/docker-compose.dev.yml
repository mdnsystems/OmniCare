# =============================================================================
# DOCKER COMPOSE - DESENVOLVIMENTO
# =============================================================================
# 
# Configuração específica para desenvolvimento com hot reload
# 
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # APLICAÇÃO EM DESENVOLVIMENTO
  # =============================================================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: omnicare_api_dev
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:8080"
      - "9229:9229"  # Debug port
    environment:
      # Configurações do Servidor
      NODE_ENV: development
      PORT: 8080
      HOST: 0.0.0.0
      
      # Configurações do Banco de Dados
      DATABASE_URL: postgresql://postgres:password@postgres:5432/omnicare?schema=public
      
      # Configurações JWT
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-key-for-development-only}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret-key-for-development-only}
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_EXPIRES_IN: 30d
      
      # Configurações CORS (mais permissivo para desenvolvimento)
      CORS_ALLOWED_ORIGINS: "*"
      
      # Configurações de Rate Limiting (mais permissivo para desenvolvimento)
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 1000
      RATE_LIMIT_SKIP_SUCCESSFUL_REQUESTS: true
      RATE_LIMIT_SKIP_FAILED_REQUESTS: true
      
      # Configurações de Segurança (mais permissivo para desenvolvimento)
      BCRYPT_ROUNDS: 4
      PASSWORD_MIN_LENGTH: 4
      PASSWORD_REQUIRE_UPPERCASE: false
      PASSWORD_REQUIRE_LOWERCASE: false
      PASSWORD_REQUIRE_NUMBERS: false
      PASSWORD_REQUIRE_SPECIAL_CHARS: false
      
      # Configurações de Log (mais verboso para desenvolvimento)
      LOG_LEVEL: debug
      
      # Configurações de Upload
      MAX_FILE_SIZE: 52428800  # 50MB para desenvolvimento
      
      # Configurações de Frontend
      FRONTEND_URL: http://localhost:5173
    volumes:
      - .:/app
      - /app/node_modules
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - omnicare_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # PRISMA STUDIO (DESENVOLVIMENTO)
  # =============================================================================
  prisma-studio:
    image: node:18-alpine
    container_name: omnicare_prisma_studio_dev
    restart: "no"
    working_dir: /app
    ports:
      - "5555:5555"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/omnicare?schema=public
    volumes:
      - ./prisma:/app/prisma
      - ./generated:/app/generated
      - ./package.json:/app/package.json
      - ./package-lock.json:/app/package-lock.json
    networks:
      - omnicare_network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        npm install &&
        npx prisma generate &&
        npx prisma studio --hostname 0.0.0.0 --port 5555
      "

  # =============================================================================
  # ADMINER (INTERFACE WEB PARA POSTGRESQL)
  # =============================================================================
  adminer:
    image: adminer:latest
    container_name: omnicare_adminer
    restart: "no"
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - omnicare_network
    depends_on:
      - postgres
    profiles:
      - development

  # =============================================================================
  # REDIS COMMANDER (INTERFACE WEB PARA REDIS)
  # =============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: omnicare_redis_commander
    restart: "no"
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_password
    networks:
      - omnicare_network
    depends_on:
      - redis
    profiles:
      - development 