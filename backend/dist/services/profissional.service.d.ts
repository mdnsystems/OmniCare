import { ProfissionalInput } from '../validators/profissional.validator';
declare const _default: {
    create(data: ProfissionalInput & {
        tenantId: string;
    }): Promise<{
        id: string;
        tenantId: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date;
        status: import("generated/prisma").$Enums.ProfissionalStatus;
        dataNascimento: Date;
        telefone: string;
        email: string;
        numero: string;
        complemento: string | null;
        bairro: string;
        cep: string;
        cidade: string;
        estado: string;
        especialidadeId: string;
        registro: string;
        crm: string | null;
        sexo: string;
        dataContratacao: Date;
        rua: string;
        horarioInicio: string;
        horarioFim: string;
        intervalo: string;
        diasTrabalho: string[];
    }>;
    findAll(tenantId?: string): Promise<({
        especialidade: {
            id: string;
            tenantId: string;
            nome: string;
            ativo: boolean;
            createdAt: Date;
            updatedAt: Date;
            descricao: string;
            tipoClinica: import("generated/prisma").$Enums.TipoClinica;
            configuracoes: import("generated/prisma/runtime/library").JsonValue;
        };
    } & {
        id: string;
        tenantId: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date;
        status: import("generated/prisma").$Enums.ProfissionalStatus;
        dataNascimento: Date;
        telefone: string;
        email: string;
        numero: string;
        complemento: string | null;
        bairro: string;
        cep: string;
        cidade: string;
        estado: string;
        especialidadeId: string;
        registro: string;
        crm: string | null;
        sexo: string;
        dataContratacao: Date;
        rua: string;
        horarioInicio: string;
        horarioFim: string;
        intervalo: string;
        diasTrabalho: string[];
    })[]>;
    findAtivos(tenantId?: string): Promise<({
        especialidade: {
            id: string;
            tenantId: string;
            nome: string;
            ativo: boolean;
            createdAt: Date;
            updatedAt: Date;
            descricao: string;
            tipoClinica: import("generated/prisma").$Enums.TipoClinica;
            configuracoes: import("generated/prisma/runtime/library").JsonValue;
        };
    } & {
        id: string;
        tenantId: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date;
        status: import("generated/prisma").$Enums.ProfissionalStatus;
        dataNascimento: Date;
        telefone: string;
        email: string;
        numero: string;
        complemento: string | null;
        bairro: string;
        cep: string;
        cidade: string;
        estado: string;
        especialidadeId: string;
        registro: string;
        crm: string | null;
        sexo: string;
        dataContratacao: Date;
        rua: string;
        horarioInicio: string;
        horarioFim: string;
        intervalo: string;
        diasTrabalho: string[];
    })[]>;
    findById(id: string, tenantId?: string): Promise<({
        especialidade: {
            id: string;
            tenantId: string;
            nome: string;
            ativo: boolean;
            createdAt: Date;
            updatedAt: Date;
            descricao: string;
            tipoClinica: import("generated/prisma").$Enums.TipoClinica;
            configuracoes: import("generated/prisma/runtime/library").JsonValue;
        };
    } & {
        id: string;
        tenantId: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date;
        status: import("generated/prisma").$Enums.ProfissionalStatus;
        dataNascimento: Date;
        telefone: string;
        email: string;
        numero: string;
        complemento: string | null;
        bairro: string;
        cep: string;
        cidade: string;
        estado: string;
        especialidadeId: string;
        registro: string;
        crm: string | null;
        sexo: string;
        dataContratacao: Date;
        rua: string;
        horarioInicio: string;
        horarioFim: string;
        intervalo: string;
        diasTrabalho: string[];
    }) | null>;
    update(id: string, data: ProfissionalInput & {
        tenantId?: string;
    }, tenantId?: string): Promise<{
        especialidade: {
            id: string;
            tenantId: string;
            nome: string;
            ativo: boolean;
            createdAt: Date;
            updatedAt: Date;
            descricao: string;
            tipoClinica: import("generated/prisma").$Enums.TipoClinica;
            configuracoes: import("generated/prisma/runtime/library").JsonValue;
        };
    } & {
        id: string;
        tenantId: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date;
        status: import("generated/prisma").$Enums.ProfissionalStatus;
        dataNascimento: Date;
        telefone: string;
        email: string;
        numero: string;
        complemento: string | null;
        bairro: string;
        cep: string;
        cidade: string;
        estado: string;
        especialidadeId: string;
        registro: string;
        crm: string | null;
        sexo: string;
        dataContratacao: Date;
        rua: string;
        horarioInicio: string;
        horarioFim: string;
        intervalo: string;
        diasTrabalho: string[];
    }>;
    delete(id: string, tenantId?: string): Promise<{
        id: string;
        tenantId: string;
        nome: string;
        createdAt: Date;
        updatedAt: Date;
        status: import("generated/prisma").$Enums.ProfissionalStatus;
        dataNascimento: Date;
        telefone: string;
        email: string;
        numero: string;
        complemento: string | null;
        bairro: string;
        cep: string;
        cidade: string;
        estado: string;
        especialidadeId: string;
        registro: string;
        crm: string | null;
        sexo: string;
        dataContratacao: Date;
        rua: string;
        horarioInicio: string;
        horarioFim: string;
        intervalo: string;
        diasTrabalho: string[];
    }>;
};
export default _default;
